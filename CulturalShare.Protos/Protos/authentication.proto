syntax = "proto3";

option csharp_namespace = "AuthenticationProto";
import "google/api/annotations.proto";

service Authentication 
{
    // Authenticates a user and returns an access token.
    rpc SignIn (SignInRequest) returns (SignInResponse) {
        option (google.api.http) = {
          post: "/api/v1/auth/sign-in"
          body: "*"
        };
    };

    // Validate RefreshToken and returns new access token if RefreshToken valid
    rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/refresh-token"
            body: "*"
        };
    }

    // Get JWT token for application service-to-service authentication
    rpc GetServiceToken(ServiceTokenRequest) returns (ServiceTokenResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/service-token"
            body: "*"
        };
    };

    // Create user account in the system
    rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/api/v1/users"
            body: "*"
        };
    };
}

// Request to sign in
message SignInRequest {
  string email = 1;
  string password = 2;
}

// Request to register a new user
message CreateUserRequest {
  string email = 1;
  string password = 2;
  string first_name = 3;
  string last_name = 4;
}

// Response after user creation
message CreateUserResponse {
  int32 id = 1;
}

// Request to refresh tokens
message RefreshTokenRequest {
  string refresh_token = 1;
}

// Response after token refresh
message RefreshTokenResponse {
  string access_token = 1;
  int32 access_token_expires_in_seconds = 2;
  string refresh_token = 3;
  int32 refresh_token_expires_in_seconds = 4;
}

// Sign-in response simplified
message SignInResponse {
  string access_token = 1;
  int32 access_token_expires_in_seconds = 2;
  string refresh_token = 3;
  int32 refresh_token_expires_in_seconds = 4;
}

// Request to get service-to-service JWT token
message ServiceTokenRequest {
  string service_id = 1;
  string service_secret = 2;
}

// Response for service-to-service JWT token
message ServiceTokenResponse {
  string access_token = 1;
  int32 expires_in_seconds = 2;
}
